{
  "name": "fs",
  "description": "Filesystem components for ChiÏ‡",
  "version": "0.0.2",
  "repository": {
    "type": "git",
    "url": "https://github.com/nodule/fs.git"
  },
  "nodes": [
    {
      "name": "appendFile",
      "ns": "fs",
      "description": "fs appendFile",
      "phrases": {
        "active": "Appending data to {{input.filename}}"
      },
      "require": {
        "fs": "latest"
      },
      "ports": {
        "input": {
          "filename": {
            "title": "Filename",
            "type": "string",
            "required": true
          },
          "data": {
            "title": "Data",
            "type": "string"
          },
          "options": {
            "title": "Options (TODO)",
            "type": "object"
          }
        },
        "output": {
          "error": {
            "title": "Error",
            "type": "object"
          },
          "event:complete": {
            "Title": "Complete",
            "type": "object"
          }
        }
      },
      "env": "server",
      "fn": "output = [fs, 'appendFile', input.filename, input.data, input.options]\n"
    },
    {
      "name": "chmod",
      "ns": "fs",
      "description": "fs chmod",
      "phrases": {
        "active": "Changing file mode on {{input.path}}"
      },
      "require": {
        "fs": "latest"
      },
      "ports": {
        "input": {
          "path": {
            "title": "Path",
            "type": "string"
          },
          "mode": {
            "title": "Mode",
            "type": "string"
          }
        },
        "output": {
          "exception": {
            "title": "Exception",
            "type": "object"
          },
          "event:complete": {
            "title": "Complete",
            "type": "object"
          }
        }
      },
      "env": "server",
      "fn": "output = [fs, 'chmod', input.path, input.mode]\n"
    },
    {
      "name": "chown",
      "ns": "fs",
      "description": "fs chown",
      "phrases": {
        "active": "Changing owner/group for {{input.path}}"
      },
      "require": {
        "fs": "latest"
      },
      "ports": {
        "input": {
          "path": {
            "title": "Path",
            "type": "string"
          },
          "uid": {
            "title": "uid",
            "type": "integer"
          },
          "gid": {
            "title": "gid",
            "type": "integer"
          }
        },
        "output": {
          "exception": {
            "title": "Exception",
            "type": "object"
          },
          "event:complete": {
            "title": "Complete",
            "type": "object"
          }
        }
      },
      "env": "server",
      "fn": "output = [fs, 'chown', input.path, input.uid, input.gid]\n"
    },
    {
      "name": "close",
      "ns": "fs",
      "description": "fs close",
      "phrases": {
        "active": "Closing file handle"
      },
      "require": {
        "fs": "latest"
      },
      "ports": {
        "input": {
          "fd": {
            "type": "object"
          }
        },
        "output": {
          "exception": {
            "title": "Exception",
            "type": "object"
          },
          "event:complete": {
            "title": "Complete",
            "type": "object"
          }
        }
      },
      "env": "server",
      "fn": "output = [fs, 'close', input.fd]\n"
    },
    {
      "name": "exists",
      "ns": "fs",
      "description": "fs exists",
      "phrases": {
        "active": "Checking whether file {{input.path}} exists"
      },
      "require": {
        "fs": "latest"
      },
      "ports": {
        "input": {
          "path": {
            "type": "string"
          }
        },
        "output": {
          "exists": {
            "title": "Exists",
            "type": "boolean"
          }
        }
      },
      "env": "server",
      "fn": "output [fs, 'exists', input.path]\n"
    },
    {
      "name": "fchmod",
      "ns": "fs",
      "description": "fs fchmod",
      "phrases": {
        "active": "Changing file mode for fd"
      },
      "require": {
        "fs": "latest"
      },
      "ports": {
        "input": {
          "fd": {
            "title": "Fd",
            "type": "object"
          },
          "mode": {
            "title": "Mode",
            "type": "string"
          }
        },
        "output": {
          "exception": {
            "title": "Exception",
            "type": "object"
          },
          "event:complete": {
            "title": "Complete",
            "type": "object"
          }
        }
      },
      "env": "server",
      "fn": "output = [fs, 'fchmod', input.fd, input.mode]\n"
    },
    {
      "name": "fchown",
      "ns": "fs",
      "description": "fs fchown",
      "phrases": {
        "active": "Changing file owner/group for fd"
      },
      "require": {
        "fs": "latest"
      },
      "ports": {
        "input": {
          "fd": {
            "title": "Fd",
            "type": "object"
          },
          "uid": {
            "title": "Uid",
            "type": "integer"
          },
          "gid": {
            "title": "Gid",
            "type": "integer"
          }
        },
        "output": {
          "exception": {
            "title": "Exception",
            "type": "object"
          },
          "event:complete": {
            "title": "Complete",
            "type": "object"
          }
        }
      },
      "env": "server",
      "fn": "output = [fs, 'fchown', input.fd, input.uid, input.gid]\n"
    },
    {
      "name": "fstat",
      "ns": "fs",
      "description": "fs fstat",
      "phrases": {
        "active": "Reading file statistics for fd"
      },
      "require": {
        "fs": "latest"
      },
      "ports": {
        "input": {
          "fd": {
            "type": "object"
          }
        },
        "output": {
          "error": {
            "title": "Error",
            "type": "object"
          },
          "stats": {
            "title": "stats",
            "type": "object"
          }
        }
      },
      "env": "server",
      "fn": "output [fs, 'fstat', input.fd]\n"
    },
    {
      "name": "fsync",
      "ns": "fs",
      "description": "fs fsync",
      "phrases": {
        "active": "Calling sync for fd"
      },
      "require": {
        "fs": "latest"
      },
      "ports": {
        "input": {
          "fd": {
            "type": "object"
          }
        },
        "output": {
          "exception": {
            "title": "Exception",
            "type": "object"
          },
          "event:complete": {
            "title": "Complete",
            "type": "object"
          }
        }
      },
      "env": "server",
      "fn": "output = [fs, 'fsync', input.fd]\n"
    },
    {
      "name": "ftruncate",
      "ns": "fs",
      "description": "fs ftruncate",
      "phrases": {
        "active": "Truncating fd with a length of {{input.len}}"
      },
      "require": {
        "fs": "latest"
      },
      "ports": {
        "input": {
          "fd": {
            "type": "object"
          },
          "len": {
            "type": "integer"
          }
        },
        "output": {
          "exception": {
            "title": "Exception",
            "type": "object"
          },
          "event:complete": {
            "title": "Complete",
            "type": "object"
          }
        }
      },
      "env": "server",
      "fn": "output [fs, 'ftruncate', input.fd, input.len]\n"
    },
    {
      "name": "futimes",
      "ns": "fs",
      "description": "fs futimes",
      "phrases": {
        "active": "Set access & modification times for fd to {{input.atime}} and {{input.mtime}}"
      },
      "require": {
        "fs": "latest"
      },
      "ports": {
        "input": {
          "fd": {
            "type": "object"
          },
          "atime": {
            "type": "string"
          },
          "mtime": {
            "type": "string"
          }
        },
        "output": {
          "exception": {
            "title": "Exception",
            "type": "object"
          },
          "event:complete": {
            "title": "Complete",
            "type": "object"
          }
        }
      },
      "env": "server",
      "fn": "output = [fs, 'futimes', input.fd, input.atime, input.mtime]\n"
    },
    {
      "name": "lchmod",
      "ns": "fs",
      "description": "fs lchmod",
      "phrases": {
        "active": "Changing file mode for {{input.path}}"
      },
      "require": {
        "fs": "latest"
      },
      "ports": {
        "input": {
          "path": {
            "title": "Path",
            "type": "string"
          },
          "mode": {
            "title": "Mode",
            "type": "string"
          }
        },
        "output": {
          "exception": {
            "title": "Exception",
            "type": "object"
          },
          "event:complete": {
            "title": "Complete",
            "type": "object"
          }
        }
      },
      "env": "server",
      "fn": "output = [fs, 'lchmod', input.path, input.mode]\n"
    },
    {
      "name": "lchown",
      "ns": "fs",
      "description": "fs lchown",
      "phrases": {
        "active": "Changing file owner/group for {{input.path}}"
      },
      "require": {
        "fs": "latest"
      },
      "ports": {
        "input": {
          "path": {
            "title": "Path",
            "type": "string"
          },
          "uid": {
            "title": "Uid",
            "type": "integer"
          },
          "gid": {
            "title": "Gid",
            "type": "integer"
          }
        },
        "output": {
          "exception": {
            "title": "Exception",
            "type": "object"
          },
          "event:complete": {
            "title": "Complete",
            "type": "object"
          }
        }
      },
      "env": "server",
      "fn": "output = [fs, 'lchown', input.path, input.uid, input.gid]\n"
    },
    {
      "name": "link",
      "ns": "fs",
      "description": "fs link",
      "phrases": {
        "active": "Linking {{input.srcpath}} to {{input.dstpath}}"
      },
      "require": {
        "fs": "latest"
      },
      "ports": {
        "input": {
          "srcpath": {
            "type": "string"
          },
          "dstpath": {
            "type": "string"
          }
        },
        "output": {
          "exception": {
            "title": "Exception",
            "type": "object"
          },
          "event:complete": {
            "title": "Complete",
            "type": "object"
          }
        }
      },
      "env": "server",
      "fn": "output [fs, 'link', input.srcpath, input.dstpath]\n"
    },
    {
      "name": "lstat",
      "ns": "fs",
      "description": "fs lstat",
      "phrases": {
        "active": "Getting stats for {{input.path}}"
      },
      "require": {
        "fs": "latest"
      },
      "ports": {
        "input": {
          "path": {
            "type": "string"
          }
        },
        "output": {
          "error": {
            "title": "Error",
            "type": "object"
          },
          "stats": {
            "title": "Stats",
            "type": "object"
          }
        }
      },
      "env": "server",
      "fn": "output [fs, 'lstat', input.path]\n"
    },
    {
      "name": "mkdir",
      "ns": "fs",
      "description": "fs mkdir",
      "phrases": {
        "active": "Creating directory {{input.path}}"
      },
      "require": {
        "fs": "latest"
      },
      "ports": {
        "input": {
          "path": {
            "title": "Path",
            "type": "string"
          },
          "mode": {
            "title": "Mode",
            "type": "string"
          }
        },
        "output": {
          "exception": {
            "title": "Exception",
            "type": "object"
          },
          "event:complete": {
            "title": "Complete",
            "type": "object"
          }
        }
      },
      "env": "server",
      "fn": "output = [fs, 'mkdir', input.path, input.mode]\n"
    },
    {
      "name": "open",
      "ns": "fs",
      "description": "fs open",
      "phrases": {
        "active": "Opening file {{input.path}} ({{input.flags}}, {{input.mode}})"
      },
      "require": {
        "fs": "latest"
      },
      "ports": {
        "input": {
          "path": {
            "title": "Path",
            "type": "string"
          },
          "flags": {
            "title": "Flags",
            "type": "string"
          },
          "mode": {
            "title": "Mode",
            "type": "string"
          }
        },
        "output": {
          "error": {
            "title": "Error",
            "type": "object"
          },
          "fd": {
            "title": "Fd",
            "type": "object"
          },
          "event:complete": {
            "title": "Complete",
            "type": "object"
          }
        }
      },
      "env": "server",
      "fn": "output= [fs, 'open', input.path, input.flags, input.mode]\n"
    },
    {
      "name": "read",
      "ns": "fs",
      "description": "fs read",
      "phrases": {
        "active": "Reading fd {{input.offset}}:{{input.length}}:{{input.position}} "
      },
      "require": {
        "fs": "latest"
      },
      "ports": {
        "input": {
          "fd": {
            "type": "object"
          },
          "buffer": {
            "type": "object"
          },
          "offset": {
            "type": "integer"
          },
          "length": {
            "type": "integer"
          },
          "position": {
            "type": "integer"
          }
        },
        "output": {
          "error": {
            "title": "Error",
            "type": "object"
          },
          "bytesRead": {
            "title": "Bytes read",
            "type": "object"
          },
          "buffer": {
            "title": "Buffer",
            "type": "object"
          }
        }
      },
      "env": "server",
      "fn": "output = [fs, 'read', input.fd, input.buffer, input.offset, input.length, input.position]\n"
    },
    {
      "name": "readFile",
      "ns": "fs",
      "title": "fs readFile",
      "description": "fs readFile",
      "phrases": {
        "active": "Reading file {{input.filename}} ({{input.options.encoding}}, {{input.options.flag}})"
      },
      "require": {
        "fs": "latest"
      },
      "ports": {
        "input": {
          "filename": {
            "title": "Filename",
            "type": "string",
            "required": true
          },
          "options": {
            "type": "object",
            "title": "Options",
            "properties": {
              "encoding": {
                "title": "Encoding",
                "type": "string"
              },
              "flag": {
                "title": "Flag",
                "type": "string",
                "default": "r"
              }
            }
          }
        },
        "output": {
          "error": {
            "type": "object"
          },
          "data": {
            "type": "object"
          }
        }
      },
      "env": "server",
      "fn": "output = function(cb) {\n\n  fs.readFile(input.filename, input.options, function(err, data) {\n    cb({\n      err: err,\n      data: data.toString()\n    });\n  });\n\n};\n"
    },
    {
      "name": "readdir",
      "ns": "fs",
      "description": "fs readdir",
      "phrases": {
        "active": "Listing files from directory {{input.path}}"
      },
      "require": {
        "fs": "latest"
      },
      "ports": {
        "input": {
          "path": {
            "type": "string"
          }
        },
        "output": {
          "error": {
            "title": "Error",
            "type": "object"
          },
          "files": {
            "title": "Files",
            "type": "array"
          }
        }
      },
      "env": "server",
      "fn": "output = [fs, 'readdir', input.path]\n"
    },
    {
      "name": "readlink",
      "ns": "fs",
      "description": "fs readlink",
      "phrases": {
        "active": "Reading link {{input.path}}"
      },
      "require": {
        "fs": "latest"
      },
      "ports": {
        "input": {
          "path": {
            "type": "string"
          }
        },
        "output": {
          "error": {
            "type": "object"
          },
          "linkString": {
            "title": "Link String",
            "type": "string"
          }
        }
      },
      "env": "server",
      "fn": "output = [fs, 'readlink', input.path]\n"
    },
    {
      "name": "realpath",
      "ns": "fs",
      "description": "fs realpath",
      "phrases": {
        "active": "Performing realpath for {{input.path}}"
      },
      "require": {
        "fs": "latest"
      },
      "ports": {
        "input": {
          "path": {
            "type": "string"
          }
        },
        "output": {
          "error": {
            "type": "object"
          },
          "resolvedPath": {
            "type": "object"
          }
        }
      },
      "env": "server",
      "fn": "output = [fs, 'realpath', input.path]\n"
    },
    {
      "name": "rename",
      "ns": "fs",
      "description": "fs rename",
      "phrases": {
        "active": "Renaming {{input.oldPath}} to {{input.newPath}}"
      },
      "require": {
        "fs": "latest"
      },
      "ports": {
        "input": {
          "oldPath": {
            "type": "string"
          },
          "newPath": {
            "type": "string"
          }
        },
        "output": {
          "exception": {
            "title": "Exception",
            "type": "object"
          },
          "event:complete": {
            "title": "Complete",
            "type": "object"
          }
        }
      },
      "env": "server",
      "fn": "output = [fs, 'rename', input.oldPath, input.newPath]\n"
    },
    {
      "name": "rmdir",
      "ns": "fs",
      "description": "fs rmdir",
      "phrases": {
        "active": "Removing directory {{input.path}}"
      },
      "require": {
        "fs": "latest"
      },
      "ports": {
        "input": {
          "path": {
            "title": "Path",
            "type": "string"
          }
        },
        "output": {
          "exception": {
            "title": "Exception",
            "type": "object"
          },
          "event:complete": {
            "title": "Complete",
            "type": "object"
          }
        }
      },
      "env": "server",
      "fn": "output = [fs, 'rmdir', input.path]\n"
    },
    {
      "name": "stat",
      "ns": "fs",
      "description": "fs stat",
      "phrases": {
        "active": "Reading stats for {{input.path}}"
      },
      "require": {
        "fs": "latest"
      },
      "ports": {
        "input": {
          "path": {
            "title": "Path",
            "type": "string"
          }
        },
        "output": {
          "error": {
            "title": "Error",
            "type": "object"
          },
          "stats": {
            "title": "Stats",
            "type": "object"
          }
        }
      },
      "env": "server",
      "fn": "output = [fs, 'stat', input.path]\n"
    },
    {
      "name": "symlink",
      "ns": "fs",
      "description": "fs symlink",
      "phrases": {
        "active": "Creating symbolic link from {{input.srcpath}} to {{input.dstpath}}"
      },
      "require": {
        "fs": "latest"
      },
      "ports": {
        "input": {
          "srcpath": {
            "title": "Source path",
            "type": "string"
          },
          "dstpath": {
            "title": "Destination path",
            "type": "string"
          },
          "type": {
            "enum": [
              "file",
              "dir",
              "junction"
            ],
            "default": "file"
          }
        },
        "output": {
          "exception": {
            "title": "Exception",
            "type": "object"
          },
          "event:complete": {
            "title": "Complete",
            "type": "object"
          }
        }
      },
      "env": "server",
      "fn": "output = [fs, 'symlink', input.srcpath, input.dstpath, input.type]\n"
    },
    {
      "name": "truncate",
      "ns": "fs",
      "description": "fs truncate",
      "phrases": {
        "active": "Truncating file {{input.path}} to {{input.len}}"
      },
      "require": {
        "fs": "latest"
      },
      "ports": {
        "input": {
          "path": {
            "type": "string"
          },
          "len": {
            "type": "integer"
          }
        },
        "output": {
          "exception": {
            "title": "Exception",
            "type": "object"
          },
          "event:complete": {
            "title": "Complete",
            "type": "object"
          }
        }
      },
      "env": "server",
      "fn": "output = [fs, 'truncate', input.path, input.len]\n"
    },
    {
      "name": "unlink",
      "ns": "fs",
      "description": "fs unlink",
      "phrases": {
        "active": "Unlinking file {{input.path}}"
      },
      "require": {
        "fs": "latest"
      },
      "ports": {
        "input": {
          "path": {
            "title": "Path",
            "type": "string"
          }
        },
        "output": {
          "exception": {
            "title": "Exception",
            "type": "object"
          },
          "event:complete": {
            "title": "Complete",
            "type": "object"
          }
        }
      },
      "env": "server",
      "fn": "output = [fs, 'unlink', input.path]\n"
    },
    {
      "name": "utimes",
      "ns": "fs",
      "description": "fs utimes",
      "phrases": {
        "active": "Getting utimes for {{input.path}}"
      },
      "require": {
        "fs": "latest"
      },
      "ports": {
        "input": {
          "path": {
            "type": "string"
          },
          "atime": {
            "type": "string"
          },
          "mtime": {
            "type": "string"
          }
        },
        "output": {
          "exception": {
            "title": "Exception",
            "type": "object"
          },
          "event:complete": {
            "title": "Complete",
            "type": "object"
          }
        }
      },
      "env": "server",
      "fn": "output = [fs, 'utimes', input.path, input.atime, input.mtime]\n"
    },
    {
      "name": "write",
      "ns": "fs",
      "description": "fs write",
      "phrases": {
        "active": "Writing to file descriptor"
      },
      "require": {
        "fs": "latest"
      },
      "ports": {
        "input": {
          "fd": {
            "title": "Fd",
            "type": "object"
          },
          "buffer": {
            "title": "Buffer",
            "type": "object"
          },
          "offset": {
            "title": "Offset",
            "type": "integer"
          },
          "length": {
            "title": "Length",
            "type": "integer"
          },
          "position": {
            "title": "Position",
            "type": "integer"
          }
        },
        "output": {
          "error": {
            "title": "Error",
            "type": "object"
          },
          "written": {
            "title": "Written",
            "description": "How many *bytes* were written from *buffer*",
            "type": "object"
          },
          "buffer": {
            "title": "Buffer",
            "type": "object"
          }
        }
      },
      "env": "server",
      "fn": "output = [fs, 'write', input.fd, input.buffer, input.offset, input.length, input.position]\n"
    },
    {
      "name": "writeFile",
      "ns": "fs",
      "description": "fs writeFile",
      "phrases": {
        "active": "Writing file {{input.filename}}"
      },
      "require": {
        "fs": "latest"
      },
      "ports": {
        "input": {
          "filename": {
            "type": "string"
          },
          "data": {
            "type": "string"
          },
          "options": {
            "title": "Options",
            "type": "object",
            "properties": {
              "encoding": {
                "title": "Encoding",
                "type": "string",
                "default": "utf-8"
              },
              "mode": {
                "title": "Mode",
                "type": "number",
                "default": 438
              },
              "flag": {
                "title": "Flag",
                "type": "string",
                "default": "w"
              }
            }
          }
        },
        "output": {
          "error": {
            "title": "Error",
            "type": "object"
          },
          "event:complete": {
            "title": "Complete",
            "type": "object"
          }
        }
      },
      "env": "server",
      "fn": "output = [fs, 'writeFile', input.filename, input.data, input.options]\n"
    }
  ],
  "twigs": [
    {
      "name": "readFile",
      "ns": "fs",
      "title": "fs readFile",
      "description": "fs readFile",
      "nodes": [
        {
          "id": "0",
          "ns": "fs",
          "name": "readFile",
          "context": {
            "filename": "/etc/passwd",
            "options": {}
          }
        },
        {
          "id": "1",
          "ns": "console",
          "name": "log"
        }
      ],
      "links": [
        {
          "source": "0",
          "target": "1",
          "out": "results",
          "in": "msg"
        }
      ],
      "nodeDefinitions": {
        "console": {
          "log": {
            "ports": {
              "input": {
                "msg": {
                  "type": "any",
                  "title": "Log message",
                  "description": "Logs a message to the console"
                }
              },
              "output": {}
            },
            "description": "Console log",
            "ns": "console",
            "name": "log",
            "fn": "console.log(input.msg)",
            "_id": "5258bf00d1c59a9537000012"
          }
        },
        "fs": {
          "readFile": {
            "ports": {
              "input": {
                "filename": {
                  "type": "string"
                },
                "options": {
                  "type": "object"
                }
              },
              "output": {
                "error": {
                  "type": "object"
                },
                "results": {
                  "type": "object"
                }
              }
            },
            "require": {
              "fs": "latest"
            },
            "description": "fs readFile",
            "name": "readFile",
            "ns": "fs",
            "fn": "output = [fs, 'readFile', input.filename, input.options]\n",
            "_id": "5258bf00d1c59a953700003a"
          }
        }
      }
    }
  ],
  "env": "server"
}