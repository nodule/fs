{
  "name": "fs",
  "description": "Filesystem components for ChiÏ‡",
  "version": "0.0.2",
  "repository": {
    "type": "git",
    "url": "https://github.com/nodule/fs.git"
  },
  "nodes": [
    {
      "name": "appendFile",
      "ns": "fs",
      "title": "Append File",
      "description": "fs appendFile",
      "phrases": {
        "active": "Appending data to {{input.file}}"
      },
      "ports": {
        "input": {
          "file": {
            "title": "Filename",
            "type": "string",
            "required": true
          },
          "in": {
            "title": "Data",
            "type": "string"
          },
          "options": {
            "title": "Options (TODO)",
            "type": "object"
          }
        },
        "output": {
          "error": {
            "title": "Error",
            "type": "object"
          }
        }
      },
      "dependencies": {
        "npm": {
          "fs": "builtin"
        }
      },
      "env": "server",
      "fn": "output = [fs, 'appendFile', $.file, $.in, $.options]\n"
    },
    {
      "name": "chmod",
      "ns": "fs",
      "title": "Chmod",
      "description": "fs chmod",
      "phrases": {
        "active": "Changing file mode on {{input.path}}"
      },
      "ports": {
        "input": {
          "path": {
            "title": "Path",
            "type": "string"
          },
          "mode": {
            "title": "Mode",
            "type": "string"
          }
        },
        "output": {
          "exception": {
            "title": "Exception",
            "type": "object"
          }
        }
      },
      "dependencies": {
        "npm": {
          "fs": "builtin"
        }
      },
      "env": "server",
      "fn": "output = [fs, 'chmod', $.path, $.mode]\n"
    },
    {
      "name": "chown",
      "ns": "fs",
      "description": "fs chown",
      "phrases": {
        "active": "Changing owner/group for {{input.path}}"
      },
      "ports": {
        "input": {
          "path": {
            "title": "Path",
            "type": "string"
          },
          "uid": {
            "title": "uid",
            "type": "integer"
          },
          "gid": {
            "title": "gid",
            "type": "integer"
          }
        },
        "output": {
          "exception": {
            "title": "Exception",
            "type": "object"
          }
        }
      },
      "dependencies": {
        "npm": {
          "fs": "builtin"
        }
      },
      "env": "server",
      "fn": "output = [fs, 'chown', $.path, $.uid, $.gid]\n"
    },
    {
      "name": "close",
      "ns": "fs",
      "description": "fs close",
      "phrases": {
        "active": "Closing file handle"
      },
      "ports": {
        "input": {
          "fd": {
            "type": "object"
          }
        },
        "output": {
          "exception": {
            "title": "Exception",
            "type": "object"
          }
        }
      },
      "dependencies": {
        "npm": {
          "fs": "builtin"
        }
      },
      "env": "server",
      "fn": "output = [fs, 'close', $.fd]\n"
    },
    {
      "name": "createReadStream",
      "ns": "fs",
      "title": "Create Read Stream",
      "description": "Creats a Readable Stream Object",
      "phrases": {
        "active": "Reading file {{input.file}} ({{input.encoding}})"
      },
      "ports": {
        "input": {
          "file": {
            "title": "Filename",
            "type": "string",
            "required": true
          },
          "start": {
            "title": "Start",
            "type": "number",
            "default": null
          },
          "end": {
            "title": "End",
            "type": "number",
            "default": null
          },
          "encoding": {
            "title": "Encoding",
            "type": "string",
            "default": "utf-8"
          },
          "flag": {
            "title": "Flag",
            "type": "string",
            "default": "r"
          }
        },
        "output": {
          "error": {
            "title": "Error",
            "type": "object"
          },
          "fd": {
            "type": "number",
            "title": "File descriptor"
          },
          "stream": {
            "title": "Stream",
            "type": "Stream"
          }
        }
      },
      "dependencies": {
        "npm": {
          "fs": "builtin"
        }
      },
      "env": "server",
      "fn": "output = function(cb) {\n\n  var opts = {\n    flag: $.flag,\n    encoding: $.encoding\n  };\n\n  if($.start) opts.start = $.start;\n  if($.end) opts.end = $.end;\n\n  var stream = fs.createReadStream($.file, opts);\n  cb({ stream: stream});\n\n  stream.on('error', function(err) {\n    cb({ error: $.create(err)});\n  });\n\n  stream.on('open', function(fd) {\n    cb({ fd: $.create(fd)});\n  });\n\n};\n"
    },
    {
      "name": "createWriteStream",
      "ns": "fs",
      "title": "Create Write Stream",
      "description": "Creates a Writeable Stream Object",
      "phrases": {
        "active": "Writing file {{input.file}} ({{input.encoding}})"
      },
      "ports": {
        "input": {
          "file": {
            "title": "Filename",
            "type": "string",
            "required": true
          },
          "encoding": {
            "title": "Encoding",
            "type": "string",
            "default": "utf-8"
          },
          "flag": {
            "title": "Flag",
            "type": "string",
            "default": "w"
          }
        },
        "output": {
          "error": {
            "title": "Error",
            "type": "object"
          },
          "stream": {
            "title": "Stream",
            "type": "Stream"
          },
          "fd": {
            "type": "number",
            "title": "File descriptor"
          }
        }
      },
      "dependencies": {
        "npm": {
          "fs": "builtin"
        }
      },
      "env": "server",
      "fn": "output = function(cb) {\n\n  var opts = {\n    flag: $.flag,\n    encoding: $.encoding\n  };\n\n  var stream = fs.createWriteStream($.file, opts);\n  cb({ stream: $.create(stream)});\n\n  stream.on('error', function(err) {\n    cb({ error: $.create(err)});\n  });\n\n  stream.on('open', function(fd) {\n    cb({ fd: $.create(fd)});\n  });\n\n};\n"
    },
    {
      "name": "exists",
      "ns": "fs",
      "async": true,
      "description": "fs exists",
      "phrases": {
        "active": "Checking whether file {{input.path}} exists"
      },
      "ports": {
        "input": {
          "path": {
            "type": "string",
            "async": true
          }
        },
        "output": {
          "yes": {
            "title": "Exists",
            "type": "string"
          },
          "no": {
            "title": "Absent",
            "type": "string"
          }
        }
      },
      "dependencies": {
        "npm": {
          "fs": "builtin"
        }
      },
      "env": "server",
      "fn": "on.input.path = function() {\n  fs.exists($.path, function(yes) {\n    if(yes) {\n      output( { yes: $.get('path') } );\n    } else {\n      output( { no: $.get('path') } );\n    }\n  });\n};\n"
    },
    {
      "name": "fchmod",
      "ns": "fs",
      "description": "fs fchmod",
      "phrases": {
        "active": "Changing file mode for fd"
      },
      "ports": {
        "input": {
          "fd": {
            "title": "Fd",
            "type": "object"
          },
          "mode": {
            "title": "Mode",
            "type": "string"
          }
        },
        "output": {
          "exception": {
            "title": "Exception",
            "type": "object"
          }
        }
      },
      "dependencies": {
        "npm": {
          "fs": "builtin"
        }
      },
      "env": "server",
      "fn": "output = [fs, 'fchmod', $.fd, $.mode]\n"
    },
    {
      "name": "fchown",
      "ns": "fs",
      "description": "fs fchown",
      "phrases": {
        "active": "Changing file owner/group for fd"
      },
      "ports": {
        "input": {
          "fd": {
            "title": "Fd",
            "type": "object"
          },
          "uid": {
            "title": "Uid",
            "type": "integer"
          },
          "gid": {
            "title": "Gid",
            "type": "integer"
          }
        },
        "output": {
          "exception": {
            "title": "Exception",
            "type": "object"
          }
        }
      },
      "dependencies": {
        "npm": {
          "fs": "builtin"
        }
      },
      "env": "server",
      "fn": "output = [fs, 'fchown', $.fd, $.uid, $.gid]\n"
    },
    {
      "name": "file",
      "ns": "fs",
      "description": "Create a filename based on dir, name and optional extenstion",
      "phrases": {
        "active": "Created filename {{input.dir}}/{{input.name}}{{input.ext}}"
      },
      "ports": {
        "input": {
          "name": {
            "title": "Name",
            "type": "string",
            "required": true
          },
          "dir": {
            "title": "Directory",
            "type": "string"
          },
          "ext": {
            "title": "Extension",
            "type": "string"
          }
        },
        "output": {
          "file": {
            "title": "File",
            "type": "string"
          }
        }
      },
      "dependencies": {
        "npm": {
          "path": "builtin"
        }
      },
      "env": "server",
      "fn": "var file = $.ext ? $.name + $.ext : $.name;\noutput.file = $.create($.dir ? path.normalize([$.dir, file].join(path.sep)) : file);\n"
    },
    {
      "name": "fstat",
      "ns": "fs",
      "description": "fs fstat",
      "phrases": {
        "active": "Reading file statistics for fd"
      },
      "ports": {
        "input": {
          "fd": {
            "type": "object"
          }
        },
        "output": {
          "error": {
            "title": "Error",
            "type": "object"
          },
          "stats": {
            "title": "stats",
            "type": "object"
          }
        }
      },
      "dependencies": {
        "npm": {
          "fs": "builtin"
        }
      },
      "env": "server",
      "fn": "output = [fs, 'fstat', $.fd]\n"
    },
    {
      "name": "fsync",
      "ns": "fs",
      "description": "fs fsync",
      "phrases": {
        "active": "Calling sync for fd"
      },
      "ports": {
        "input": {
          "fd": {
            "type": "object"
          }
        },
        "output": {
          "exception": {
            "title": "Exception",
            "type": "object"
          }
        }
      },
      "dependencies": {
        "npm": {
          "fs": "builtin"
        }
      },
      "env": "server",
      "fn": "output = [fs, 'fsync', $.fd]\n"
    },
    {
      "name": "ftruncate",
      "ns": "fs",
      "description": "fs ftruncate",
      "phrases": {
        "active": "Truncating fd with a length of {{input.len}}"
      },
      "ports": {
        "input": {
          "fd": {
            "type": "object"
          },
          "len": {
            "type": "integer"
          }
        },
        "output": {
          "exception": {
            "title": "Exception",
            "type": "object"
          }
        }
      },
      "dependencies": {
        "npm": {
          "fs": "builtin"
        }
      },
      "env": "server",
      "fn": "output = [fs, 'ftruncate', $.fd, $.len]\n"
    },
    {
      "name": "futimes",
      "ns": "fs",
      "description": "fs futimes",
      "phrases": {
        "active": "Set access & modification times for fd to {{input.atime}} and {{input.mtime}}"
      },
      "ports": {
        "input": {
          "fd": {
            "type": "object"
          },
          "atime": {
            "type": "string"
          },
          "mtime": {
            "type": "string"
          }
        },
        "output": {
          "exception": {
            "title": "Exception",
            "type": "object"
          }
        }
      },
      "dependencies": {
        "npm": {
          "fs": "builtin"
        }
      },
      "env": "server",
      "fn": "output = [fs, 'futimes', $.fd, $.atime, $.mtime]\n"
    },
    {
      "name": "lchmod",
      "ns": "fs",
      "description": "fs lchmod",
      "phrases": {
        "active": "Changing file mode for {{input.path}}"
      },
      "ports": {
        "input": {
          "path": {
            "title": "Path",
            "type": "string"
          },
          "mode": {
            "title": "Mode",
            "type": "string"
          }
        },
        "output": {
          "exception": {
            "title": "Exception",
            "type": "object"
          }
        }
      },
      "dependencies": {
        "npm": {
          "fs": "builtin"
        }
      },
      "env": "server",
      "fn": "output = [fs, 'lchmod', $.path, $.mode]\n"
    },
    {
      "name": "lchown",
      "ns": "fs",
      "description": "fs lchown",
      "phrases": {
        "active": "Changing file owner/group for {{input.path}}"
      },
      "ports": {
        "input": {
          "path": {
            "title": "Path",
            "type": "string"
          },
          "uid": {
            "title": "Uid",
            "type": "integer"
          },
          "gid": {
            "title": "Gid",
            "type": "integer"
          }
        },
        "output": {
          "exception": {
            "title": "Exception",
            "type": "object"
          }
        }
      },
      "dependencies": {
        "npm": {
          "fs": "builtin"
        }
      },
      "env": "server",
      "fn": "output = [fs, 'lchown', $.path, $.uid, $.gid]\n"
    },
    {
      "name": "link",
      "ns": "fs",
      "description": "fs link",
      "phrases": {
        "active": "Linking {{input.srcpath}} to {{input.dstpath}}"
      },
      "ports": {
        "input": {
          "srcpath": {
            "type": "string"
          },
          "dstpath": {
            "type": "string"
          }
        },
        "output": {
          "exception": {
            "title": "Exception",
            "type": "object"
          }
        }
      },
      "dependencies": {
        "npm": {
          "fs": "builtin"
        }
      },
      "env": "server",
      "fn": "output = [fs, 'link', $.srcpath, $.dstpath]\n"
    },
    {
      "name": "lstat",
      "ns": "fs",
      "description": "fs lstat",
      "phrases": {
        "active": "Getting stats for {{input.path}}"
      },
      "ports": {
        "input": {
          "path": {
            "type": "string"
          }
        },
        "output": {
          "error": {
            "title": "Error",
            "type": "object"
          },
          "stats": {
            "title": "Stats",
            "type": "object"
          }
        }
      },
      "dependencies": {
        "npm": {
          "fs": "builtin"
        }
      },
      "env": "server",
      "fn": "output = [fs, 'lstat', $.path]\n"
    },
    {
      "name": "mime",
      "ns": "fs",
      "description": "Lookup mime type",
      "async": true,
      "phrases": {
        "active": "Looking up mimetype for {{input.in}}"
      },
      "ports": {
        "input": {
          "in": {
            "title": "Filename",
            "type": "string",
            "async": true
          }
        },
        "output": {
          "out": {
            "title": "MimeType",
            "type": "string"
          }
        }
      },
      "dependencies": {
        "npm": {
          "mime-types": "latest"
        }
      },
      "env": "server",
      "fn": "on.input.in = function() {\n  mime_types.lookup($.in, function(err) {\n    if(err) {\n      output({error: $.create(err)});\n    } else {\n      output({path: $.get('path')});\n    }\n  });\n};\n"
    },
    {
      "name": "mkdir",
      "ns": "fs",
      "description": "fs mkdir",
      "async": true,
      "phrases": {
        "active": "Creating directory {{input.path}}"
      },
      "ports": {
        "input": {
          "path": {
            "title": "Path",
            "type": "string",
            "async": true
          },
          "mode": {
            "title": "Mode",
            "type": "number",
            "default": 511
          }
        },
        "output": {
          "path": {
            "title": "Path",
            "type": "string"
          },
          "error": {
            "title": "Error",
            "type": "Error"
          }
        }
      },
      "dependencies": {
        "npm": {
          "fs": "builtin"
        }
      },
      "env": "server",
      "fn": "on.input.path = function() {\n  fs.mkdir($.path, $.mode, function(err) {\n    if(err) {\n      output({error: $.create(err)});\n    } else {\n      output({path: $.get('path')});\n    }\n  });\n};\n"
    },
    {
      "name": "open",
      "ns": "fs",
      "description": "fs open",
      "phrases": {
        "active": "Opening file {{input.path}} ({{input.flags}}, {{input.mode}})"
      },
      "ports": {
        "input": {
          "path": {
            "title": "Path",
            "type": "string"
          },
          "flags": {
            "title": "Flags",
            "type": "string"
          },
          "mode": {
            "title": "Mode",
            "type": "string"
          }
        },
        "output": {
          "error": {
            "title": "Error",
            "type": "object"
          },
          "fd": {
            "title": "Fd",
            "type": "object"
          }
        }
      },
      "dependencies": {
        "npm": {
          "fs": "builtin"
        }
      },
      "env": "server",
      "fn": "output = [fs, 'open', $.path, $.flags, $.mode]\n"
    },
    {
      "name": "read",
      "ns": "fs",
      "description": "fs read",
      "phrases": {
        "active": "Reading fd {{input.offset}}:{{input.length}}:{{input.position}} "
      },
      "ports": {
        "input": {
          "fd": {
            "type": "object"
          },
          "buffer": {
            "type": "object"
          },
          "offset": {
            "type": "integer"
          },
          "length": {
            "type": "integer"
          },
          "position": {
            "type": "integer"
          }
        },
        "output": {
          "error": {
            "title": "Error",
            "type": "object"
          },
          "bytesRead": {
            "title": "Bytes read",
            "type": "object"
          },
          "buffer": {
            "title": "Buffer",
            "type": "object"
          }
        }
      },
      "dependencies": {
        "npm": {
          "fs": "builtin"
        }
      },
      "env": "server",
      "fn": "output = [fs, 'read', $.fd, $.buffer, $.offset, $.length, $.position]\n"
    },
    {
      "name": "readdir",
      "ns": "fs",
      "description": "fs readdir",
      "phrases": {
        "active": "Listing files from directory {{input.path}}"
      },
      "ports": {
        "input": {
          "path": {
            "type": "string"
          }
        },
        "output": {
          "error": {
            "title": "Error",
            "type": "object"
          },
          "files": {
            "title": "Files",
            "type": "array"
          }
        }
      },
      "dependencies": {
        "npm": {
          "fs": "builtin"
        }
      },
      "env": "server",
      "fn": "output = [fs, 'readdir', $.path]\n"
    },
    {
      "name": "readFile",
      "ns": "fs",
      "title": "fs readFile",
      "description": "fs readFile",
      "phrases": {
        "active": "Reading file {{input.file}} ({{input.options.encoding}}, {{input.options.flag}})"
      },
      "async": true,
      "ports": {
        "input": {
          "file": {
            "title": "Filename",
            "type": "string",
            "required": true,
            "async": true
          },
          "encoding": {
            "title": "Encoding",
            "type": "string",
            "default": "utf-8"
          },
          "flag": {
            "title": "Flag",
            "type": "string",
            "default": "r"
          }
        },
        "output": {
          "error": {
            "title": "Error",
            "type": "object"
          },
          "out": {
            "title": "Out",
            "type": "string"
          }
        }
      },
      "dependencies": {
        "npm": {
          "fs": "builtin"
        }
      },
      "env": "server",
      "fn": "on.input.file = function() {\n  fs.readFile($.file, {\n    flag: $.flag,\n    encoding: $.encoding\n  }, function(err, contents) {\n    if (err) {\n      output({error: $.create(err)})\n    } else {\n      output({out: $.create(contents)})\n    }\n  })\n}\n"
    },
    {
      "name": "readlink",
      "ns": "fs",
      "description": "fs readlink",
      "phrases": {
        "active": "Reading link {{input.path}}"
      },
      "ports": {
        "input": {
          "path": {
            "type": "string"
          }
        },
        "output": {
          "error": {
            "type": "object"
          },
          "linkString": {
            "title": "Link String",
            "type": "string"
          }
        }
      },
      "dependencies": {
        "npm": {
          "fs": "builtin"
        }
      },
      "env": "server",
      "fn": "output = [fs, 'readlink', $.path]\n"
    },
    {
      "name": "realpath",
      "ns": "fs",
      "description": "fs realpath",
      "phrases": {
        "active": "Performing realpath for {{input.path}}"
      },
      "ports": {
        "input": {
          "path": {
            "type": "string"
          }
        },
        "output": {
          "error": {
            "title": "Error",
            "type": "object"
          },
          "resolvedPath": {
            "title": "Resolved Path",
            "type": "object"
          }
        }
      },
      "dependencies": {
        "npm": {
          "fs": "builtin"
        }
      },
      "env": "server",
      "fn": "output = [fs, 'realpath', $.path]\n"
    },
    {
      "name": "rename",
      "ns": "fs",
      "description": "fs rename",
      "phrases": {
        "active": "Renaming {{input.oldPath}} to {{input.newPath}}"
      },
      "ports": {
        "input": {
          "oldPath": {
            "type": "string"
          },
          "newPath": {
            "type": "string"
          }
        },
        "output": {
          "exception": {
            "title": "Exception",
            "type": "object"
          }
        }
      },
      "dependencies": {
        "npm": {
          "fs": "builtin"
        }
      },
      "env": "server",
      "fn": "output = [fs, 'rename', $.oldPath, $.newPath]\n"
    },
    {
      "name": "rmdir",
      "ns": "fs",
      "description": "fs rmdir",
      "phrases": {
        "active": "Removing directory {{input.path}}"
      },
      "ports": {
        "input": {
          "path": {
            "title": "Path",
            "type": "string"
          }
        },
        "output": {
          "exception": {
            "title": "Exception",
            "type": "object"
          }
        }
      },
      "dependencies": {
        "npm": {
          "fs": "builtin"
        }
      },
      "env": "server",
      "fn": "output = [fs, 'rmdir', $.path]\n"
    },
    {
      "name": "stat",
      "ns": "fs",
      "description": "fs stat",
      "phrases": {
        "active": "Reading stats for {{input.path}}"
      },
      "ports": {
        "input": {
          "path": {
            "title": "Path",
            "type": "string"
          }
        },
        "output": {
          "error": {
            "title": "Error",
            "type": "object"
          },
          "stats": {
            "title": "Stats",
            "type": "object"
          }
        }
      },
      "dependencies": {
        "npm": {
          "fs": "builtin"
        }
      },
      "env": "server",
      "fn": "output = [fs, 'stat', $.path]\n"
    },
    {
      "name": "symlink",
      "ns": "fs",
      "description": "fs symlink",
      "phrases": {
        "active": "Creating symbolic link from {{input.srcpath}} to {{input.dstpath}}"
      },
      "ports": {
        "input": {
          "srcpath": {
            "title": "Source path",
            "type": "string"
          },
          "dstpath": {
            "title": "Destination path",
            "type": "string"
          },
          "type": {
            "enum": [
              "file",
              "dir",
              "junction"
            ],
            "default": "file"
          }
        },
        "output": {
          "exception": {
            "title": "Exception",
            "type": "object"
          }
        }
      },
      "dependencies": {
        "npm": {
          "fs": "builtin"
        }
      },
      "env": "server",
      "fn": "output = [fs, 'symlink', $.srcpath, $.dstpath, $.type]\n"
    },
    {
      "name": "truncate",
      "ns": "fs",
      "description": "fs truncate",
      "phrases": {
        "active": "Truncating file {{input.path}} to {{input.len}}"
      },
      "ports": {
        "input": {
          "path": {
            "type": "string"
          },
          "len": {
            "type": "integer"
          }
        },
        "output": {
          "exception": {
            "title": "Exception",
            "type": "object"
          }
        }
      },
      "dependencies": {
        "npm": {
          "fs": "builtin"
        }
      },
      "env": "server",
      "fn": "output = [fs, 'truncate', $.path, $.len]\n"
    },
    {
      "name": "unlink",
      "ns": "fs",
      "description": "fs unlink",
      "phrases": {
        "active": "Unlinking file {{input.path}}"
      },
      "ports": {
        "input": {
          "path": {
            "title": "Path",
            "type": "string"
          }
        },
        "output": {
          "exception": {
            "title": "Exception",
            "type": "object"
          }
        }
      },
      "dependencies": {
        "npm": {
          "fs": "builtin"
        }
      },
      "env": "server",
      "fn": "output = [fs, 'unlink', $.path]\n"
    },
    {
      "name": "utimes",
      "ns": "fs",
      "description": "fs utimes",
      "phrases": {
        "active": "Getting utimes for {{input.path}}"
      },
      "ports": {
        "input": {
          "path": {
            "type": "string"
          },
          "atime": {
            "type": "string"
          },
          "mtime": {
            "type": "string"
          }
        },
        "output": {
          "exception": {
            "title": "Exception",
            "type": "object"
          }
        }
      },
      "dependencies": {
        "npm": {
          "fs": "builtin"
        }
      },
      "env": "server",
      "fn": "output = [fs, 'utimes', $.path, $.atime, $.mtime]\n"
    },
    {
      "name": "watch",
      "ns": "fs",
      "description": "Watches a file",
      "phrases": {
        "active": "Watching file {{input.file}}"
      },
      "ports": {
        "input": {
          "file": {
            "type": "string",
            "title": "Filename",
            "required": true
          },
          "persistent": {
            "type": "boolean",
            "title": "Persistent",
            "description": "Whether it should keep watching",
            "default": false
          }
        },
        "output": {
          "event": {
            "title": "Event",
            "type": "string"
          },
          "file": {
            "title": "Filename",
            "type": "string"
          }
        }
      },
      "dependencies": {
        "npm": {
          "fs": "builtin"
        }
      },
      "env": "server",
      "fn": "output = [fs, 'watch', $.file, {\n  persistent: $.persistent\n}]\n"
    },
    {
      "name": "write",
      "ns": "fs",
      "description": "fs write",
      "phrases": {
        "active": "Writing to file descriptor"
      },
      "ports": {
        "input": {
          "fd": {
            "title": "Fd",
            "type": "object"
          },
          "buffer": {
            "title": "Buffer",
            "type": "object"
          },
          "offset": {
            "title": "Offset",
            "type": "integer"
          },
          "length": {
            "title": "Length",
            "type": "integer"
          },
          "position": {
            "title": "Position",
            "type": "integer"
          }
        },
        "output": {
          "error": {
            "title": "Error",
            "type": "object"
          },
          "written": {
            "title": "Written",
            "description": "How many *bytes* were written from *buffer*",
            "type": "object"
          },
          "buffer": {
            "title": "Buffer",
            "type": "object"
          }
        }
      },
      "dependencies": {
        "npm": {
          "fs": "builtin"
        }
      },
      "env": "server",
      "fn": "output = [fs, 'write', $.fd, $.buffer, $.offset, $.length, $.position]\n"
    },
    {
      "name": "writeFile",
      "ns": "fs",
      "description": "fs writeFile",
      "phrases": {
        "active": "Writing file {{input.file}}"
      },
      "ports": {
        "input": {
          "file": {
            "type": "string"
          },
          "in": {
            "type": "string"
          },
          "encoding": {
            "title": "Encoding",
            "type": "string",
            "default": "utf-8"
          },
          "mode": {
            "title": "Mode",
            "type": "number",
            "default": 438
          },
          "flag": {
            "title": "Flag",
            "type": "string",
            "default": "w"
          }
        },
        "output": {
          "error": {
            "title": "Error",
            "type": "object"
          },
          "out": {
            "title": "Output",
            "type": "string"
          }
        }
      },
      "dependencies": {
        "npm": {
          "fs": "builtin"
        }
      },
      "env": "server",
      "fn": "output = function() {\n  fs.writeFile($.file, $.in, {\n    encoding: $.encoding,\n    mode: $.mode,\n    flag: $.flag\n  }, function(err) {\n    if (err) {\n      cb({error: $.create(err)})\n    } else {\n      cb({out: $.write('in', this.data)})\n    }\n    done()\n  }.bind({data: $.in}))\n}\n"
    }
  ],
  "env": "server"
}